from manimlib.imports import *

class CauchyInequality(Scene):
    def construct(self):
        # object
        word_1 = TextMobject("柯西不等式:").set_color(GREEN).scale(1.5)
        word_2 = TextMobject("多维形式:").set_color(GREEN)
        word_3 = TextMobject("也可写作:").set_color(GREEN)
        formula_1 = TexMobject("(a^{2} +b^{2} )","(c^{2} +d^{2} )","\ge","(ac + bd)^{2}")
        formula_2 = TexMobject("(a^{2}+b^{2}+c^{2}+...)(d^{2}+e^{2}+f^{2}+...)\ge (ad+be+cf+...)^{2}").scale(0.6)
        formula_3 = TexMobject("\sum_{i=1}^{n} a_{i}^{2}\cdot\sum_{i=1}^{n} b_{i}^{2}=(\sum_{i=1}^{n} a_{i}b_{i})^{2}").scale(0.6)
        word_1.shift(LEFT*4+UP*2)
        formula_1.next_to(word_1,DOWN).align_to(word_1,LEFT)
        word_2.next_to(formula_1,DOWN).align_to(word_1,LEFT)
        formula_2.next_to(word_2,DOWN).align_to(word_2,LEFT)
        word_3.next_to(formula_2, DOWN).align_to(word_2, LEFT)
        formula_3.next_to(word_3, DOWN).align_to(word_3, LEFT)
        pic_1 = ImageMobject("/Users/ytj/Desktop/ManimInstall/manim_7May/image/Cauchy.jpg")
        pic_1.shift(RIGHT*4).scale(2)
        # animation
        self.play(FadeIn(word_1))
        self.play(Write(formula_1))
        self.play(FadeIn(pic_1))
        self.wait()
        self.play(FadeInFrom(word_2,UP))
        self.play(Write(formula_2))
        self.wait()
        self.play(FadeInFrom(word_3, UP))
        self.play(Write(formula_3))

class Transition(Scene):
    def construct(self):
        word_1 = TextMobject("以上就是","柯西不等式","的多种表达形式")
        word_2 = TextMobject("在具体证明","柯西不等式","之前")
        word_3 = TextMobject("让我们先来回顾一下","勾股定理","的证明")
        word_1[1].set_color(GREEN)
        word_1.shift(UP*1.5)
        word_2[1].set_color(GREEN)
        word_3[1].set_color(ORANGE)
        word_3.shift(DOWN*1.5)

        self.play(Write(word_1))
        self.wait()
        self.play(Write(word_2),run_time=1.5)
        self.play(Write(word_3))

class Proof1(Scene):
    def construct(self):
        tri_1  =Polygon(np.array([-0.5,1,0]),np.array([-0.5,-1,0]),np.array([0.5,-1,0]))
        tri_1.set_stroke(color=WHITE)
        letter_a = TexMobject("a")
        letter_a.next_to(tri_1,DOWN)
        letter_b = TexMobject("b")
        letter_b.next_to(tri_1, LEFT)
        self.play(ShowCreation(tri_1))
        self.play(ApplyMethod(tri_1.set_fill,BLUE),ApplyMethod(tri_1.set_opacity,0.8))
        self.play(Write(letter_a),Write(letter_b))
        self.wait()
        tri_1_group = VGroup(tri_1,letter_a,letter_b)
        self.play(ApplyMethod(tri_1_group.shift,LEFT*2+DOWN*1.5))
        tri_2 = Polygon(np.array([-2,-1.5, 0]), np.array([2,-1.5, 0]), np.array([2,1.5,0]))
        tri_2.set_stroke(color=WHITE)
        letter_c = TexMobject("d")
        letter_c.next_to(tri_2, DOWN)
        letter_d = TexMobject("c")
        letter_d.next_to(tri_2,RIGHT)
        self.play(ShowCreation(tri_2))
        self.play(ApplyMethod(tri_2.set_fill,BLUE), ApplyMethod(tri_2.set_opacity, 0.8))
        self.play(Write(letter_c), Write(letter_d))
        tri_2_group = VGroup(tri_2, letter_c, letter_d)
        self.wait()
        self.play(ApplyMethod(tri_2_group.shift,RIGHT*0.5+DOWN))
        tri_1_2_group = VGroup(tri_1,tri_2)
        self.play(WiggleOutThenIn(tri_1_2_group))
        tri_1_2_group_copy = tri_1_2_group.copy()
        tri_3 = tri_1.copy().flip(axis=RIGHT).flip(axis=UP).align_to(tri_2,RIGHT).align_to(tri_2,DOWN).shift(UP*3)
        tri_4 = tri_2.copy().flip(axis=RIGHT).flip(axis=UP).align_to(tri_1,LEFT).align_to(tri_1,DOWN).shift(UP*2)
        tri_3_4_group = VGroup(tri_3,tri_4)
        self.play(Transform(tri_1_2_group_copy,tri_3_4_group))
        rec_1 = Polygon(np.array([-1.5,-2.5,0]),np.array([2.5,0.5,0]),np.array([1.5,2.5,0]),np.array([-2.5,-0.5,0]))
        rec_1.set_color(color=ORANGE).set_stroke(WHITE).set_opacity(0.8)
        self.play(FadeInFromLarge(rec_1))
        value_side_1 = TexMobject("\sqrt{a^{2}+b^{2}}").scale(0.6)
        value_side_1.move_to(tri_1.get_center()).shift(UR*0.2).rotate(-np.arctan(2))
        self.play(FadeInFromDown(value_side_1))
        value_side_2 = TexMobject("\sqrt{{c^{2}+d^{2}}").scale(0.8)
        value_side_2.move_to(tri_2.get_center()).shift(UL * 0.3).rotate(np.arctan(3/4))
        self.play(FadeInFromDown(value_side_2))
        arc_1 = Arc(radius=0.3,start_angle=np.arctan(3/4),angle=(PI-np.arctan(3/4)-np.arctan(2))).shift(LEFT*1.5+DOWN*2.5)
        self.wait()
        self.play(ShowCreation(arc_1))
        theta = TexMobject("\\theta").scale(0.6).move_to(arc_1.get_center()).shift(UP*0.25+RIGHT*0.08)
        self.play(Write(theta))
        big_square_group = VGroup(tri_1,tri_2,tri_3,tri_4,letter_a,letter_b,letter_c,letter_d,rec_1,arc_1,theta,value_side_1,value_side_2)
        self.remove(tri_1_2_group_copy)
        self.play(ApplyMethod(big_square_group.shift,LEFT*3))
        formula_1 = TexMobject("S","=","\sqrt{a^{2}+b^{2}}","\cdot ","\sqrt{c^{2}+d^{2}}","\cdot","\sin\\theta")
        formula_1.scale(0.8).shift(UP*2+RIGHT*3.5)
        formula_1[0].set_color(ORANGE)
        self.play(TransformFromCopy(rec_1,formula_1[0]),Write(formula_1[1]))
        self.play(TransformFromCopy(value_side_1, formula_1[2]),Write(formula_1[3]),TransformFromCopy(value_side_2, formula_1[4]))
        self.play(Write(formula_1[5]),TransformFromCopy(theta,formula_1[6]))
        self.play(ApplyMethod(big_square_group.scale,0.8))
        self.play(ApplyMethod(big_square_group.shift,UP))
        self.play(ApplyMethod(formula_1.next_to,big_square_group,DOWN))
        self.wait(2)
        big_square_2 = Polygon(np.array([-2,-2,0]),np.array([2,-2,0]),np.array([2,2,0]),np.array([-2,2,0]))
        big_square_2.set_stroke(color=WHITE)
        rec_2 = Polygon(np.array([-2,-2,0]),np.array([-1.2,-2,0]),np.array([-1.2,-0.4,0]),np.array([-2,-0.4,0]))
        rec_2.set_fill(BLUE).set_opacity(0.8).set_stroke(color=WHITE)
        line_for_rec_2 = Line(start=np.array([-2,-0.4,0]),end=np.array([-1.2,-2,0]))
        rec_3 = Polygon(np.array([-1.2,-0.4,0]),np.array([2,-0.4,0]),np.array([2,2,0]),np.array([-1.2,2,0]))
        rec_3.set_fill(BLUE).set_opacity(0.8).set_stroke(color=WHITE)
        line_for_rec_3 = Line(start=np.array([-1.2,-0.4,0]), end=np.array([2,2,0]))
        rec_4 = Polygon(np.array([-2,2,0]),np.array([-1.2,2,0]),np.array([-1.2,-0.4,0]),np.array([-2,-0.4,0]))
        rec_4.set_fill(ORANGE,opacity=0.8).set_stroke(color=WHITE)
        rec_5 = Polygon(np.array([-1.2,-0.4, 0]), np.array([2,-0.4, 0]), np.array([2,-2, 0]),np.array([-1.2, -2, 0]))
        rec_5.set_fill(ORANGE,opacity=0.8).set_stroke(color=WHITE)
        letter_a_2 = TexMobject("a")
        letter_b_2 = TexMobject("b")
        letter_c_2 = TexMobject("c")
        letter_d_2 = TexMobject("d")
        letter_a_2.next_to(rec_4,UP)
        letter_b_2.next_to(rec_5,RIGHT)
        letter_c_2.next_to(rec_4,LEFT)
        letter_d_2.next_to(rec_5,DOWN)
        big_square_group_2 = VGroup(rec_2,rec_3,big_square_2,line_for_rec_2,line_for_rec_3,rec_4,rec_5,letter_a_2,letter_b_2,letter_c_2,letter_d_2)
        big_square_group_2.shift(RIGHT*3+UP)
        self.wait(2)
        self.play(TransformFromCopy(big_square_group,big_square_group_2))
        formula_2 = TexMobject("S'","=","ac","+","bd")
        formula_2[0].set_color(ORANGE).scale(0.8)
        formula_2.next_to(big_square_group_2,DOWN)
        self.wait()
        rec_4_copy = rec_4.copy()
        rec_5_copy = rec_5.copy()
        self.add(rec_4_copy,rec_5_copy)
        self.play(Transform(rec_4,formula_2[0]),Transform(rec_5,formula_2[0]))
        letter_a_2_copy = letter_a_2.copy()
        letter_b_2_copy = letter_b_2.copy()
        letter_c_2_copy = letter_c_2.copy()
        letter_d_2_copy = letter_d_2.copy()
        self.add(letter_a_2_copy,letter_b_2_copy,letter_c_2_copy,letter_d_2_copy)
        self.play(Write(formula_2[1]),Transform(letter_a_2,formula_2[2]),Transform(letter_c_2,formula_2[2]),Write(formula_2[3]),Transform(letter_b_2,formula_2[4]),Transform(letter_d_2,formula_2[4]))
        tri_1_width = ValueTracker(tri_1.get_width())
        tri_1_height = ValueTracker(tri_1.get_height())
        def transform_tri_1(mob, dt):
            mob.set_width(tri_1_width.get_value(),stretch=True,about_point=tri_1.get_corner(DL))
            mob.set_height(tri_1_height.get_value(),stretch=True,about_point=tri_1.get_corner(DL))

        def transform_tri_2(mob, dt):
            mob.set_width((4 - tri_1_width.get_value()), stretch=True, about_point=tri_2.get_corner(DR))
            mob.set_height((4 - tri_1_height.get_value()), stretch=True, about_point=tri_2.get_corner(DR))

        def transform_tri_3(mob, dt):
            mob.set_width(tri_1_width.get_value(), stretch=True, about_point=tri_3.get_corner(UR))
            mob.set_height(tri_1_height.get_value(), stretch=True, about_point=tri_3.get_corner(UR))

        def transform_tri_4(mob, dt):
            mob.set_width((4 - tri_1_width.get_value()), stretch=True, about_point=tri_4.get_corner(UL))
            mob.set_height((4 - tri_1_height.get_value()), stretch=True, about_point=tri_4.get_corner(UL))
        def update_rec_1(mob,dt):
            mob.set_points_as_corners([tri_1.get_corner(DR),tri_2.get_corner(UR),tri_3.get_corner(UL),tri_4.get_corner(DL)])
        def update_rec_2(mob,dt):
            mob.set_width(tri_1_width.get_value(),stretch=True,about_point=rec_2.get_corner(DL))
            mob.set_height(tri_1_height.get_value(), stretch=True, about_point=rec_2.get_corner(DL))
        def update_rec_3(mob,dt):
            mob.set_width((4 - tri_1_width.get_value()),stretch=True,about_point=rec_3.get_corner(UR))
            mob.set_height((4 - tri_1_height.get_value()), stretch=True, about_point=rec_3.get_corner(UR))
        def update_rec_4(mob,dt):
            mob.set_width(tri_1_width.get_value(),stretch=True,about_point=rec_4_copy.get_corner(UL))
            mob.set_height((4 - tri_1_height.get_value()), stretch=True, about_point=rec_4_copy.get_corner(UL))
        def update_rec_5(mob, dt):
            mob.set_width((4 - tri_1_width.get_value()), stretch=True, about_point=rec_5_copy.get_corner(DR))
            mob.set_height(tri_1_height.get_value(), stretch=True, about_point=rec_5_copy.get_corner(DR))
        tri_1.add_updater(transform_tri_1)
        tri_2.add_updater(transform_tri_2)
        tri_3.add_updater(transform_tri_3)
        tri_4.add_updater(transform_tri_4)
        rec_1.add_updater(update_rec_1)
        rec_2.add_updater(update_rec_2)
        rec_3.add_updater(update_rec_3)
        rec_4_copy.add_updater(update_rec_4)
        rec_5_copy.add_updater(update_rec_5)
        self.wait(2)
        self.play(FadeOut(arc_1),FadeOut(value_side_1),FadeOut(value_side_2),FadeOut(line_for_rec_2),FadeOut(line_for_rec_3))
        size_rec_1 = DecimalNumber(16 - tri_1.get_width()*tri_1.get_height() - tri_2.get_width()*tri_2.get_height()).next_to(formula_1[0],DOWN).add_updater(lambda m:m.set_value(16 - tri_1.get_width()*tri_1.get_height() - tri_2.get_width()*tri_2.get_height())).set_color(ORANGE)
        size_rec_2_3 = DecimalNumber(rec_4_copy.get_width() * rec_4_copy.get_height() + rec_5_copy.get_width() * rec_5_copy.get_height()).next_to(formula_2[0],DOWN).add_updater(lambda m:m.set_value(rec_4_copy.get_width() * rec_4_copy.get_height() + rec_5_copy.get_width() * rec_5_copy.get_height())).set_color(ORANGE)
        theta.add_updater(lambda m: m.next_to(tri_2.get_corner(DL), UP * 0.5)).add_updater(lambda m: m.set_height(size_rec_1.get_value() / (7.04*3.5)))
        letter_a.add_updater(lambda m:m.next_to(tri_1,DOWN))
        letter_b.add_updater(lambda m: m.next_to(tri_1,LEFT))
        letter_c.add_updater(lambda m: m.next_to(tri_2,DOWN))
        letter_d.add_updater(lambda m: m.next_to(tri_2, RIGHT))
        letter_a_2_copy.add_updater(lambda m:m.next_to(rec_4_copy,UP))
        letter_c_2_copy.add_updater(lambda m:m.next_to(rec_4_copy,LEFT))
        letter_b_2_copy.add_updater(lambda m:m.next_to(rec_5_copy,RIGHT))
        letter_d_2_copy.add_updater(lambda m: m.next_to(rec_5_copy, DOWN))
        self.play(FadeInFrom(size_rec_1,UP),FadeInFrom(size_rec_2_3,UP))
        self.play(tri_1_height.increment_value,1,tri_1_width.increment_value,1,run_time=2)
        self.play(tri_1_height.increment_value,0.5, tri_1_width.increment_value, 1,run_time=2)
        self.play(tri_1_height.increment_value,-1, tri_1_width.increment_value,-2,run_time=2)
        self.play(tri_1_height.increment_value,-0.5, tri_1_width.increment_value,1.5,run_time=2)
        self.play(tri_1_height.increment_value, -0.5, tri_1_width.increment_value,-2,run_time=2)
        self.play(tri_1_height.increment_value,1.5, tri_1_width.increment_value,1.5,run_time=2)
        self.play(tri_1_height.increment_value, -1, tri_1_width.increment_value, 0.5,run_time=2)
        self.play(tri_1_height.increment_value,-0.5, tri_1_width.increment_value,1.25,run_time=2)
        self.play(tri_1_height.increment_value,2, tri_1_width.increment_value,-1.75,run_time=2)
        self.play(tri_1_height.increment_value, -2, tri_1_width.increment_value,-0.5,run_time=2)
        self.play(tri_1_height.increment_value,1, tri_1_width.increment_value, -0.5, run_time=2)
        self.play(tri_1_height.increment_value,-1, tri_1_width.increment_value, 0.5, run_time=2)
        self.play(tri_1_height.increment_value, 1, tri_1_width.increment_value, -0.5, run_time=2)
        self.play(tri_1_height.increment_value, -1, tri_1_width.increment_value, 0.5, run_time=2)
        self.play(tri_1_height.increment_value, 1, tri_1_width.increment_value, -0.5, run_time=2)
        self.play(tri_1_height.increment_value, -1, tri_1_width.increment_value, 0.5, run_time=2)
        self.play(tri_1_height.increment_value, 1, tri_1_width.increment_value, -0.5, run_time=2)
        self.play(tri_1_height.increment_value, -1, tri_1_width.increment_value, 0.5, run_time=2)

class Final(Scene):
    def construct(self):
        formula_1 = TexMobject("\\because ","\sqrt{a^{2}+b^{2}}","\cdot ","\sqrt{c^{2}+d^{2}}","\cdot","\sin\\theta")
        equal = TexMobject("=").set_color(ORANGE)
        formula_2 = TexMobject("ac", "+", "bd")
        formula_1.shift(UL*3)
        formula_2.next_to(formula_1,RIGHT*3)
        equal.next_to(formula_1,RIGHT)
        self.play(Write(formula_1))
        self.play(Write(equal),Write(formula_2))
        self.wait(3)

        formula_3 = TextMobject("又","$\\because$","0","$\le$","$\sin\\theta$","$\le$","1")
        formula_3[3].set_color(ORANGE)
        formula_3[5].set_color(ORANGE)
        formula_3[2].shift(RIGHT*0.1)
        formula_3[3:6].shift(RIGHT*0.2)
        formula_3[4].shift(RIGHT * 0.2)
        formula_3[5].shift(RIGHT * 0.3)
        formula_3[6].shift(RIGHT * 0.6)
        formula_3.next_to(formula_1,DOWN*1.5).align_to(formula_1,LEFT)
        self.wait(3)
        self.play(Write(formula_3))
        self.wait(3)
        formula_4 = TexMobject("\\therefore ","\sqrt{a^{2}+b^{2}}","\cdot ","\sqrt{c^{2}+d^{2}}","\ge","ac", "+", "bd")
        formula_4[4].set_color(ORANGE)
        formula_4.next_to(formula_3,DOWN*1.5).align_to(formula_1,LEFT)
        self.play(Write(formula_4))
        word_1 = TextMobject("左右同时开方").next_to(formula_4,DOWN*1.5).align_to(formula_1,LEFT)
        self.play(Write(word_1))
        self.play(ApplyWave(formula_4))
        self.wait(3)
        formula_5 = TextMobject("得到","$(a^{2}+b^{2})(c^{2}+d^{2})\ge(ac+bd)^{2}$")
        formula_5[1].set_color(YELLOW).scale(1.2)
        formula_5.next_to(word_1,DOWN*1.5).align_to(word_1,LEFT)
        formula_5[1].shift(RIGHT*0.6)
        self.play(TransformFromCopy(formula_4,formula_5))
        self.play(Flash(formula_5))
        formula_6 = TextMobject("当且仅当","$\\theta=\\frac{\pi }{2}$","时取等")
        formula_6.next_to(formula_5,DOWN*1.5).align_to(formula_1,LEFT)
        word_2 = TextMobject("柯西不等式二维形式证毕").next_to(formula_6,DOWN*1.5).align_to(formula_1,LEFT)
        self.wait(2)
        self.play(Write(formula_6))
        self.wait(2)
        self.play(Write(word_2))

class Producer(Scene):
    def construct(self):
        word = TextMobject("由深圳外国语学校高一(3)班\"数学之美\"小课题组制作")
